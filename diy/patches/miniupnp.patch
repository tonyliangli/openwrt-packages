--- a/miniupnpd/Makefile
+++ b/miniupnpd/Makefile
@@ -8,14 +8,15 @@
 include $(TOPDIR)/rules.mk
 
 PKG_NAME:=miniupnpd
-PKG_VERSION:=2.0.20170421
+PKG_VERSION:=3.0.20180503
 PKG_RELEASE:=3
 
 # Content-Encoding conflict, can refer to this [issue](https://github.com/miniupnp/miniupnp/issues/605)
 # so switch mirror repo to http://miniupnp.tuxfamily.org
 # PKG_SOURCE_URL:=http://miniupnp.free.fr/files
 PKG_SOURCE_URL:=http://miniupnp.tuxfamily.org/files
-PKG_SOURCE:=$(PKG_NAME)-$(PKG_VERSION).tar.gz
+PKG_SOURCE:=$(PKG_NAME)-2.0.20180503.tar.gz
+PKG_BUILD_DIR:=$(BUILD_DIR)/$(PKG_NAME)-2.0.20180503
 PKG_HASH:=9677aeccadf73b4bf8bb9d832c32b5da8266b4d58eed888f3fd43d7656405643
 
 PKG_MAINTAINER:=Markus Stenberg <fingon@iki.fi>

--- a/luci-app-upnp/root/usr/libexec/rpcd/luci.upnp
+++ b/luci-app-upnp/root/usr/libexec/rpcd/luci.upnp
@@ -5,7 +5,8 @@ local UCI = require "luci.model.uci"
 local fs   = require "nixio.fs"
 local sys  = require "luci.sys"
 
-local methods = {
+if not fs.access("/usr/sbin/nft") then
+methods = {
 	get_status = {
 		call = function()
 			local uci = UCI.cursor()
@@ -92,6 +93,93 @@ local methods = {
 		end
 	}
 }
+else
+methods = {
+	get_status = {
+		call = function()
+			local uci = UCI.cursor()
+			local lease_file = uci:get("upnpd", "config", "upnp_lease_file")
+
+			local ipv4_hints = sys.net.ipv4_hints()
+			local rule = { }
+
+			local ipt = io.popen("nft -a list chain inet fw4 dstnat | grep 'miniupnpd-.*-dstnat'")
+			if ipt then
+				while true do
+					local ln = ipt:read("*l")
+					if not ln then
+						break
+					elseif ln:match('.* "miniupnpd-.*-dstnat" .*') then
+						local proto, extport, intaddr, intport, num =
+							ln:match(".* nfproto ipv4 (%S-) dport (%d+) .* dnat ip to (%S-):(%d+) .* # handle (%d+)")
+						local descr = ""
+
+						if num and proto and extport and intaddr and intport then
+							extport = tonumber(extport)
+							intport = tonumber(intport)
+
+							if lease_file then
+								local fmt = string.format("^%s:%d:%s:%d:%%d*:(.*)$", proto:upper(), extport, intaddr, intport)
+								for uln in io.lines(lease_file) do
+									descr = uln:match(fmt)
+									if descr then
+										break
+									end
+								end
+								if not descr then descr = "" end
+							end
+
+							local host_hint, _, e
+
+							for _,e in pairs(ipv4_hints) do
+								if e[1] == intaddr then
+									host_hint = e[2]
+									break
+								end
+							end
+
+							rule[#rule+1] = {
+								num = num,
+								proto   = proto:upper(),
+								extport = extport,
+								intaddr = intaddr,
+								host_hint = host_hint,
+								intport = intport,
+								descr = descr
+							}
+						end
+					end
+				end
+
+				ipt:close()
+			end
+
+			return { rules = rule }
+		end
+	},
+	delete_rule = {
+		args = { token = "token" },
+		call = function(args)
+			local util = require "luci.util"
+			local idx = args and tonumber(args.token)
+			local res = {}
+
+			if idx and idx > 0 then
+				local uci = UCI.cursor()
+				local cmd = [[sh /usr/share/miniupnpd/core.sh delfwindex %d]]
+
+				sys.call(string.format(cmd, idx))
+
+				uci.unload()
+
+				return { result = "OK" }
+			end
+
+			return { result = "Bad request" }
+		end
+	}
+}
+end
 
 local function parseInput()
 	local parse = json.new()
