#!/bin/sh /etc/rc.common
# Copyright (C) 2008-2012 OpenWrt.org

START=80

contains() {
	for val in $1; do
		[ $val == $2 ] && return 1
	done
	return 0
}

start_service() {
	mkdir -p /var/lib/scst/pr
	mkdir -p /var/lib/scst/vdev_mode_pages
	insmod scst
	insmod scst_vdisk
	insmod iscsi-scst

	### if port entry is emty then by default we run programm with no parametrs (it use 3260 port)
	if [ ! -z "$port" ]; then
		/usr/sbin/iscsi-scstd -p $port
	else
		/usr/sbin/iscsi-scstd
	fi
	###

	echo 1 >/sys/kernel/scst_tgt/targets/iscsi/enabled
}

add_target() {
	local name
	local portal
	config_get name $1 name
	config_get portal $1 portal
	
	[ -d /sys/kernel/scst_tgt ] || start_service

	[ -e /sys/kernel/scst_tgt/targets/iscsi/$id:$name ] || {
		local cmd
		local auth_in
		local auth_out
		local user
		local pwd

		cmd="add_target $id:$name"

		config_get auth_in  $1 auth_in  "0"
		config_get auth_out $1 auth_out "0"
		config_get portals $1 allowed_portal

		[ $auth_in -ne 0 ] && {
			config_get user $1 id_in
			config_get pwd  $1 secret_in

			cmd="$cmd IncomingUser $user $pwd;"
		}

		[ $auth_out -ne 0 ] && {
			config_get user $1 id_out
			config_get pwd  $1 secret_out

			cmd="$cmd OutgoingUser $user $pwd;"
		}

		echo $cmd > /sys/kernel/scst_tgt/targets/iscsi/mgmt
	}

	echo 1 >/sys/kernel/scst_tgt/targets/iscsi/$id:$name/enabled

	# Add allowed_portal attributes to existing target
	if [ $? == 0 -a ! -z "$portal" ]; then
		for p in $portal; do
			local cmd="add_target_attribute $id:$name allowed_portal=$p"
			echo $cmd > /sys/kernel/scst_tgt/targets/iscsi/mgmt
		done
	fi

	targets="$targets $id:$name"
}

clean_targets() {
	[ -d /sys/kernel/scst_tgt ] && {
		for f in /sys/kernel/scst_tgt/targets/iscsi/$id*; do
			[ -e $f ] && {
				target=`basename $f`
				contains "$targets" $target
				[ $? == 0 ] && {
					echo "del_target $target" > /sys/kernel/scst_tgt/targets/iscsi/mgmt
					### Cause error "Resource busy"
					if [ $? == 1 ]; then
						echo 0 > /sys/kernel/scst_tgt/targets/iscsi/$target/enabled
						for n in /sys/kernel/scst_tgt/targets/iscsi/$target/sessions/*; do
							[ -e $n ] && {
							initiator_name=`basename $n`
							echo 1 > /sys/kernel/scst_tgt/targets/iscsi/$target/sessions/$initiator_name/force_close
							}
						done
					fi
				}
			}
		done
	}
}

add_device() {
	local name
	local type
	local filename
	local blocksize
	local removable
	local scsisn
	config_get name $1 name
	config_get type $1 type
	config_get path $1 path
	config_get blocksize $1 blocksize 512
	config_get removable $1 removable 0

	[ -e /sys/kernel/scst_tgt/devices/$name ] || {
		[ $type == "file" ] && {
			echo "add_device $name \
				filename=$path; \
				blocksize=$blocksize; \
				removable=$removable" \
				>/sys/kernel/scst_tgt/handlers/vdisk_fileio/mgmt

			echo "2" >/sys/kernel/scst_tgt/devices/$name/threads_num
		}
		[ $type == "block" ] && {
			echo "add_device $name \
				filename=$path; \
				blocksize=$blocksize; \
				removable=$removable" \
				>/sys/kernel/scst_tgt/handlers/vdisk_blockio/mgmt

			echo "2" >/sys/kernel/scst_tgt/devices/$name/threads_num
		}
	}

        devices="$devices $name"
}

clean_devices() {
	[ -d /sys/kernel/scst_tgt ] && {
		for f in /sys/kernel/scst_tgt/devices/*; do
			[ -e $f/handler ] && {
				device=`basename $f`
				contains "$devices" $device
				[ $? == 0 ] && {
					echo "del_device $device" >$f/handler/mgmt
				}
			}
		done
	}
}

assign_lun() {
	local d
	local curr_disk
	local target
	local new_disk
	local lun

	target=$1
	lun=$2
	new_disk=$3

	[ -d /sys/kernel/scst_tgt/targets/iscsi/$target/luns/$lun ] && {
		d=`cd /sys/kernel/scst_tgt/targets/iscsi/$target/luns/$lun/device; pwd -P`
		curr_disk=`basename $d`
	} || curr_disk=""

	[ ! "$curr_disk" == "$new_disk" ] && {
		[ ! -z "$curr_disk" ] && \
			echo "del $lun" > /sys/kernel/scst_tgt/targets/iscsi/$target/luns/mgmt
		[ ! -z "$new_disk" ] && \
			echo "add $new_disk $lun" > /sys/kernel/scst_tgt/targets/iscsi/$target/luns/mgmt
	}
}

assign() {
	local name
	local disks
	local disk
	local lun

	config_get name $1 name
	config_get disks $1 lun

	lun=0
	for disk in $disks; do
		assign_lun $id:$name $lun $disk
		let lun+=1
	done
	while [ $lun -lt 16 ]; do
		assign_lun $id:$name $lun
		let lun+=1
	done
}

global_config() {
	config_get id $1 id
	### Get service disabled entry if it emty then by default write disabled = 1
	config_get_bool disabled $1 disabled 1
	###
	config_get port $1 port
}

start() {
	config_load scst
	config_foreach global_config global

	### If entry is equal 1 then stop service and return 1, else go to next commands
	[ "$disabled" -lt 1 ] || {
		[ -d /sys/kernel/scst_tgt ] && stop
		return 1
	}
	###

	config_foreach add_target target
	clean_targets
	config_foreach add_device device
	config_foreach assign target
	clean_devices
	return 0
}

restart() {
	config_load scst
	config_foreach global_config global
	clean_devices
	clean_targets
	start
}

reload() {
	config_load scst
	config_foreach global_config global
	clean_devices
	clean_targets
	start
}

stop() {
	[ -d /sys/kernel/scst_tgt ] && {
		config_load scst
		config_foreach global_config global
		clean_devices
		clean_targets
		killall iscsi-scstd
		sleep 2
		rmmod scst_vdisk
		rmmod iscsi-scst
		rmmod scst
	}
}

