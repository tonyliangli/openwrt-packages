#!/bin/sh /etc/rc.common

#
# Copyright (C) 2021-2022  sirpdboy  <herboy2008@gmail.com> https://github.com/sirpdboy/luci-app-partexp

# This is free software, licensed under the Apache License, Version 2.0 .
#

START=99
USE_PROCD=1

EXTRA_COMMANDS="autopart"

TMP_T=/var/partexp.tmp
LOCK=/var/lock/partexp.lock
LOG=/var/log/partexp.log

limit_log() {
	local logf=$1
	[ ! -f "$logf" ] && return
	local sc=100
	[ -n "$2" ] && sc=$2
	local count=$(grep -c "" $logf)
	if [ $count -gt $sc ];then
		let count=count-$sc
		sed -i "1,$count d" $logf
	fi
}

init_env() {
	[ ! -f "$LOG" ] && echo "" > $LOG

}


gen_log()(
	[ -s $LOG ] && echo '----------------------------------------------------' >> $LOG
	log "自动分区扩展挂载开始执行..."
)

log(){
	echo "$(date +'%Y-%m-%d %H:%M:%S') $*" >> $LOG
}


get_config() {
        config_get target_function $1 target_function 1
	config_get target_disk $1 target_disk 1
	config_get_bool keep_config $1 keep_config 1
	config_get_bool auto_format $1 auto_format 1
}


fdiskB(){
	a=$1
	b=$2
	log "检测$a是否分区..."
	isP=`fdisk -l /dev/$a |grep -v "bytes"|grep "/dev/$a$b"`
	sleep 2

	if [ ! "$isP" ];then
		#Start partition
		fdisk /dev/$a << EOF >/dev/null 2> /dev/null
n
p



wq
EOF
		sleep 2
		isfdisk=1
		log "分区$a$b建立成功！"
	else
		log "检测目标分区$a$b已存在."
		isfdisk=0
	fi
	eval $(block info "/dev/$a$b" | grep -o -e "MOUNT=\S*")
	log "检测$a$b是不是被共享..."
	sleep 1
	if [ "$MOUNT" ] ; then
		msum=$(grep -c sambashare /etc/config/samba4)
		for i in $(seq 0 $((msum-1)))
		do
			dev=`uci -q get samba4.@sambashare[$i].device `
			[ $? -ne 0 ] && break
			[ "$dev" = "$a$b" ] && {
				auto=`uci -q get samba4.@sambashare[$i].auto`
				[ $auto = "1" ] && {
					uci delete -q samba4.@sambashare[$i] 
					uci commit
					/etc/init.d/samba4 reload
					log "samba4共享$a$b删除成功。"
				}
			}
		done
		umount $MOUNT
		eval $(block info "/dev/$a$b" | grep -o -e "MOUNT=\S*")
		[ "$MOUNT" ] && log "分区$a$b被共享使用，自动删除共享失败，请手动删除共享！" ;expquit 1 || log "$a$b分区共享使用，自动删除共享$MOUNT成功！"  
		sleep 5
	else
	    log "检测目标硬盘$a$b未被共享..."
	fi
	[ "$auto_format" = "1" -o "$isfdisk" = "1" ] && mkfs.ext4 -F /dev/$a$b  >/dev/null 2> /dev/null
	eval $(block info /dev/$a$b | grep -o -e "UUID=\S*")
	if [ "$UUID" = "" ] ;then 
	     log "测试/dev/$a$b分区格式失败！请检查硬件设备！"
	     expquit 1
	else
	     log "成功获取/dev/$a$b分区格式正常！" 
	fi
	[ ! -d "/mnt/$a$b" ] || mkdir -p /mnt/$a$b
	isM=`block info /dev/$a$b` 
	[ "isM" ] || mount /dev/$a$b /mnt/$a$b
	if [ "$target_function" = "/" ];then
			    mkdir -p /tmp/introot
			    mount --bind / /tmp/introot
			    tar -C /tmp/introot -cvf - . | tar -C /mnt/$a$b -xf -
			    umount /tmp/introot
			    block detect > /etc/config/fstab
			    # eval $(block info /dev/$a$b | grep -o -e "UUID=\S*")
			    # bovl=` block info | grep '/overlay' | awk -F ':' '{print $1}'`
			    # sed -i "s,$bovl,/dev/$a$b,g"  /etc/config/fstab
			    # mount /dev/$a$b /
			    log "保留数据/扩展/dev/$a$b成功！"
 			    uci -q set fstab.@mount[0].uuid="${UUID}"
			    uci -q set fstab.@mount[0].target='/'
			    uci -q set fstab.@mount[0].enabled='0'
			    sed -i "s,/mnt/$a$b,/,g"  /etc/config/fstab
			    mount /dev/$a$b /
			    uci commit fstab
				expquit 2

	elif [ "$target_function" = "/overlay" ];then
	 	if [ "$keep_config" = "1" ];then
			    cp -r /overlay/*  /mnt/$a$b/
			    block detect > /etc/config/fstab
			    uci -q set fstab.@mount[0].uuid="${UUID}"
			    uci -q set fstab.@mount[0].target='/overlay'
			    uci -q set fstab.@mount[0].enabled='0'
			    sed -i "s,/mnt/$a$b,/overlay,g"  /etc/config/fstab
			    uci commit fstab
			    log "保留数据overlay扩展/dev/$a$b成功！"
				expquit 2

		else
			    block detect > /etc/config/fstab
			    uci -q set fstab.@mount[0].uuid="${UUID}"
			    uci -q set fstab.@mount[0].target='/overlay'
			    uci -q set fstab.@mount[0].enabled='0'
			    sed -i "s,/mnt/$a$b,/overlay,g"  /etc/config/fstab
			    uci commit fstab
			    log "不保留数据overlay扩展/dev/$a$b成功！"
				expquit 2

		fi
	else 
		block detect > /etc/config/fstab
		mkdir -p $target_function
		sed -i "s,/mnt/$a$b,$target_function,g"  /etc/config/fstab
		uci commit fstab
		log "挂载/dev/$a$b到$target_function成功！"
		expquit 2

	fi
}

autopart() {
    # [ -f $LOCK ] && exit
    config_load partexp
    config_foreach get_config global
    init_env
    limit_log $LOG 500
    # touch $LOCK
    cat $LOG 2>/dev/null | sed -n '$p' | grep -q '自动分区扩展挂载开始执行...' || gen_log
	isb=`fdisk -l | grep /dev/$target_disk |grep 'Disk' | wc -l`
	if [ "$isb" = "" -o "$isb" = 1 ] ;then
              isb=1
	elif [  "$isb" = 3 -o "$isb" = 4 ] ;then
              isb=3
	else
	    log "目前支持单分区、未分区和已经一个区的硬盘.分区失败，建议删除建立的分区重新操作！错误$isb"
	    expquit 1
	fi
    isP=`fdisk -l /dev/$target_disk |grep "Disk /dev/$target_disk"`
    if [ "$isP" = "" ];then
         log "没有检测到/dev/$target_disk目标硬盘！请检查硬件和操作！"
    else
    	log  "检测到操作目标硬盘:/dev/$target_disk！$isb"
		case "$target_disk" in
		sd*)
			fdiskB $target_disk $isb
			;;
		nvme*)
			fdiskB n$target_disk p$isb
			;;
		mmc*)
			fdiskB $target_disk p$isb
			;;
		*)
			log "未能识别/dev/$target_disk目标硬盘！请联系开发人员！"
			expquit 1
			;;
		esac
		
    fi
    # rm -f $LOCK
}

start() {
[ x$x = x1 ] && exit || autopart
}

boot() {
x=1
}

expquit() {
	rm -f $LOCK
	echo $1
	exit $1
}

